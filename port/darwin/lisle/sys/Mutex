// -*- mode:C++ -*-
///////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2002-2003, Markus Schutz
//
// This library is free software. You can redistribute  and/or  modify it under
// the terms of the GNU Lesser General Public License  as published by the Free
// Software Foundation.  Either version 2.1 of the License, or (at your option)
// any later version.
//
// This library is distributed in the hope that it will be useful,  but WITHOUT
// ANY  WARRANTY.  Without  even  the  implied  warranty  of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
// for more details.
//
// You should have received  a  copy  of  the GNU Lesser General Public License
// along with this library. If not, write to the Free Software Foundation, Inc,
// 59  Temple Place,  Suite 330,  Boston,  MA  02111-1307  USA,  or consult URL
// http://www.gnu.org/licenses/lgpl.html.
//
///////////////////////////////////////////////////////////////////////////////
//
// $Id: Mutex 3516 2006-07-30 21:57:27Z schutzm $
//
// Project URL: http://lyric.sourceforge.net
//
// Description:
// Darwin definition and inlined implementation of Lisle Mutex.
// Intentionally empty:
//   Darwin lacks typed Posix mutexes. We need them and implement the stuff
//   on our own in ports/darwin/Mutex.cpp with the lisle_mutex_* functions.
//
///////////////////////////////////////////////////////////////////////////////


#include <lyric/Thread.Id.hpp>
#include <lyric/Assert.hpp>

// Undocumented. Implemented in ports/darwin/Mutex.cpp
void lisle_mutex_lock (Mutex::Type type, sys_mutex_t& mutex);
bool lisle_mutex_trylock (Mutex::Type type, sys_mutex_t& mutex);
void lisle_mutex_unlock (Mutex::Type type, sys_mutex_t& mutex);


//===========================================================================//
inline Mutex
::~Mutex ()
	throw (Exception::Thread::Permission)
{
	int rc;

	rc = pthread_mutex_destroy(&mutex_.the);
	Assert(rc != EBUSY, Exception::Thread::Permission(this, Thread::Id()));
	Assert(rc == 0, Exception(this, rc));   // Lisle error detector
}
//---------------------------------------------------------------------------//

//===========================================================================//
inline Mutex
::Mutex (Type type)
	: type_(type)
{
	pthread_mutex_init(&mutex_.the, NULL);
	mutex_.owner = NULL;
	mutex_.recursions = 0;
}
//---------------------------------------------------------------------------//

//===========================================================================//
inline void Mutex
::lock ()
	throw (Exception::Thread::Deadlock)
{
	try
		{
			if (type_ == Normal)
				pthread_mutex_lock(&mutex_.the);
			else
				lisle_mutex_lock(type_, mutex_);
		}
	catch (Exception::Thread::Deadlock& except)
		{
			Assert(false, Exception::Thread::Deadlock(this, except.tid()));
		}
}
//---------------------------------------------------------------------------//

//===========================================================================//
inline bool Mutex
::trylock ()
{
	if (type_ == Normal)
		return pthread_mutex_trylock(&mutex_.the) != EBUSY;
	else
		return lisle_mutex_trylock(type_, mutex_);
}
//---------------------------------------------------------------------------//

//===========================================================================//
inline void Mutex
::unlock ()
	throw (Exception::Thread::Permission)
{
	try
		{
			if (type_ == Normal)
				pthread_mutex_unlock(&mutex_.the);
			else
				lisle_mutex_unlock(type_, mutex_);
		}
	catch (Exception::Thread::Permission& except)
		{
			Assert(false, Exception::Thread::Permission(this, except.tid()));
		}
}
//---------------------------------------------------------------------------//

//===========================================================================//
//---------------------------------------------------------------------------//
