/*
 * Find 2 available signal numbers for Lisle in the 32..NSIG range.
 * The 2 signals will be used for:
 *   1) thread restart
 *   2) thread suspend
 */

#include <csignal>
#include <cstdio>

void handler (int signal)
{
}

int in_rt_signals (unsigned signals[2])
{
	unsigned         sig;
	bool             available[NSIG];
	struct sigaction new_action, old_action;
	unsigned         n_available_signals, used;
	
	for (sig=0; sig<NSIG; sig++)
		available[sig] = false;
	sigemptyset(&new_action.sa_mask);
	new_action.sa_flags = 0;
	new_action.sa_handler = handler;
	for (sig=32; sig<NSIG; sig++)
	{
		if (sigaction(sig, &new_action, &old_action) == 0)
		{
			available[sig] = true;
			sigaction(sig, &old_action, NULL);
		}
		else
			available[sig] = false;
	}
	n_available_signals = 0;
	for (sig=0; sig<NSIG; sig++)
	{
		if (available[sig])
			n_available_signals++;
	}
	if (n_available_signals >= 2)
	{
		used = 0;
		for (sig=0; sig<NSIG && used<2; sig++)
			if (available[sig])
			{
				signals[used] = sig;
				used++;
			}
	}
	else
		return 0;
	return 1;
}

int main ()
{
	unsigned signals[2];
	
	if (!in_rt_signals(signals))
	{
		signals[0] = SIGUSR1;
		signals[1] = SIGUSR2;
	}
	printf("%u", signals[0]);
	printf(":");
	printf("%u", signals[1]);
	
	FILE* out = fopen("signals.h", "w");
	fprintf(out, "// DO NOT EDIT\n");
	fprintf(out, "// Auto generated by port/posix/gen-signals.cpp\n");
	fprintf(out, "#define LISLE_SIG_SUSPEND %u\n", signals[0]);
	fprintf(out, "#define LISLE_SIG_RESTART %u\n", signals[1]);
	fclose(out);
	return 0;
}
